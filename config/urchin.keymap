/*
* Copyright (c) 2020 duckyb
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/key-labels/34.h"

#define ___ &trans

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define KEYS_T LH1 LH0 RH0 RH1
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150
#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 40
#define COMBO_PRIOR_IDLE 100

// Layer definitions

#define BASE 0
#define SYM 1
#define NAV 2
#define FNC 3
#define NUM 4
#define SETTINGS 5

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // hold-trigger-on-release;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        swapper_cmd_tab: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

            //  ignored-key-positions = <x>;
        };

        lt_l: layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;

            // Activate layer function immediately if a key on the right
            // side of the keyboard is used.

            hold-trigger-key-positions = <KEYS_R>;
            bindings = <&mo>, <&kp>;
        };

        lt_r: layer_tap_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;

            // Activate layer function immediately if a key on the left
            // side of the keyboard is used.

            hold-trigger-key-positions = <KEYS_L>;
            bindings = <&mo>, <&kp>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };

        m_type_md_code_block: m_type_md_code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;

            // wait-ms = <20>;
            // tap-ms = <20>;

            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp LS(RET) &kp GRAVE &kp GRAVE &kp GRAVE &kp UP>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys

        combo_bracket_v_round_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <3 13>;
            layers = <BASE SYM NUM>;
            bindings = <&kp LPAR>;
        };

        combo_bracket_v_round_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <6 16>;
            layers = <BASE SYM NUM>;
            bindings = <&kp RPAR>;
        };

        combo_bracket_v_square_l {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <2 12>;
            layers = <BASE SYM NUM >;
            bindings = <&kp LBKT>;
        };

        combo_bracket_v_square_r {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <7 17>;
            layers = <BASE SYM NUM>;
            bindings = <&kp RBKT>;
        };

        combo_bracket_v_curly_l {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <1 11>;
            layers = <BASE SYM NUM>;
            bindings = <&kp LBRC>;
        };

        combo_bracket_v_curly_r {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <8 18>;
            layers = <BASE SYM NUM>;
            bindings = <&kp RBRC>;
        };

        combo_bracket_v_angled_l {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <13 23>;
            layers = <BASE SYM NUM>;
            bindings = <&kp LT>;
        };

        combo_bracket_v_anled_r {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <16 26>;
            layers = <BASE SYM NUM>;
            bindings = <&kp GT>;
        };

        combo_bspc {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <30 31>;
            layers = <BASE NAV NUM SYM>;
            bindings = <&kp BSPC>;
        };

        combo_grave {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <18 19>;
            bindings = <&kp GRAVE>;
        };

        combo_md_code_block {
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <17 18 19>;
            bindings = <&m_type_md_code_block>;
        };

        // internal-left & external-right thumb keys
        // both left thumb keys
        // left index & middle fingers (home-row)
        // hold control & space for Adobe workflow

        combo_gui_space {
            timeout-ms = <200>;
            key-positions = <12 13>;
            bindings = <&kp LG(SPACE)>;
            layers = <0>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <23 21>;
        };

        Scrc {
            bindings = <&kp LG(LC(LS(NUMBER_4)))>;
            key-positions = <12 22>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        func_layer {
            if-layers = <1 4>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&kp Q          &kp W             &kp E             &kp R                     &kp T          &kp Y          &kp U                      &kp I              &kp O              &kp P
&hm_l RCTRL A  &hm_l LEFT_ALT S  &hm_l LEFT_GUI D  &hm_shift_l LEFT_SHIFT F  &kp G          &kp H          &hm_shift_r RIGHT_SHIFT J  &hm_r RIGHT_GUI K  &hm_r RIGHT_ALT L  &hm_r RCTRL SEMI
&kp Z          &kp X             &kp C             &kp V                     &kp B          &kp N          &kp M                      &kp COMMA          &kp DOT            &kp SLASH
                                                   &lt_l 1 TAB               &lt_l 2 SPACE  &lt_r 4 ENTER  &lt_r 5 BACKSPACE
            >;
        };

        sym_layer {
            label = "Sym.";
            bindings = <
&kp LBRC   &kp AMPS  &kp STAR     &kp LPAR   &kp RIGHT_BRACE  &kp N6             &kp N7        &kp N8            &kp N9     &kp N0
&kp SQT    &kp DLLR  &kp PERCENT  &kp CARET  &kp PLUS         &kp DOUBLE_QUOTES  &kp QUESTION  &kp SINGLE_QUOTE  &kp MINUS  &kp ASTRK
&kp TILDE  &kp EXCL  &kp AT       &kp HASH   &kp PIPE         &kp UNDER          &kp EXCL      &kp DQT           &kp PLUS   &kp FSLH
                                  &kp LPAR   &kp RBRC         &trans             &trans
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp ESC    &none      &kp C_PP    &swapper_cmd_tab  &kp C_PAUSE  &kp PG_UP     &kp HOME  &kp UP    &kp END    &kp CAPS
&sk LALT   &sk LGUI   &sk LSHIFT  &sk LCTRL         &kp RALT     &kp PG_DN     &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL
&kp LG(Z)  &kp LG(X)  &kp LG(C)   &swapper_cmd_tab  &kp LG(V)    &kp LC(BSPC)  &kp BSPC  &trans    &trans     &trans
                                  &trans            &kp LCTRL    &kp ENTER     &mo 3
            >;
        };

        fnc_layer {
            label = "FRow";
            bindings = <
&kp F1    &kp F2    &kp F3      &kp F4     &kp F5    &kp F6   &kp F7   &kp F8           &kp F9  &kp F10
&sk LALT  &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT  &kp F11  &kp F12  &kp PRINTSCREEN  &trans  &trans
&none     &none     &none       &none      &none     &none    &none    &none            &none   &none
                                &none      &none     &none    &none
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&kp LBKT   &kp N7  &kp N8  &kp N9   &kp RBKT   &none  &none  &none  &none  &none
&kp GRAVE  &kp N4  &kp N5  &kp N6   &kp EQUAL  &none  &none  &none  &none  &none
&kp QMARK  &kp N1  &kp N2  &kp N3   &kp BSLH   &none  &none  &none  &none  &none
                           &kp DOT  &kp N0     &none  &none
            >;
        };

        settings_layer {
            label = "Sett.";
            bindings = <
&bootloader     &none  &none  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&none           &none  &none  &none       &bt BT_SEL 1  &bt BT_SEL 4  &none  &none     &none  &none
&studio_unlock  &none  &none  &none       &bt BT_SEL 2  &bt BT_SEL 5  &none  &none     &none  &studio_unlock
                              &none       &none         &none         &none
            >;
        };
    };
};
